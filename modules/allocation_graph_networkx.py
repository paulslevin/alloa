from manipulations import *
import networkx as nx
from settings import WEIGHTED_HIERARCHIES


# level 1 node demands + AND -
def add_nodes1(graph):
    for i, preference in enumerate(level1_preferences):
        demand = int(preference[1])
        graph.add_node(i + 1, demand=demand)
        graph.add_node(i + 1 + level1_number, demand=-demand)


# level 2 node demands + AND -
def add_nodes2(graph):
    for choice in level2_chosen_all:
        # to make sure we don't overwrite an existing node
        node_value = int(choice) + level1_number * 2
        demand = int(level2_preferences[choice - 1][0])
        graph.add_node(node_value, demand=demand)
        graph.add_node(node_value + level2_number, demand=-demand)


# level 3 node demands + AND -
def add_nodes3(graph):
    for choice in level3_chosen_all:
        node_value = int(choice) + level1_number * 2 + level2_number * 2
        demand = int(level3_capacities[choice - 1][0])
        graph.add_node(node_value, demand=demand)
        graph.add_node(node_value + level3_number, demand=-demand)


# Add edges from source to each level 1 agent
# No need for randomisation!
def add_edges_from_source(graph):
    for i in range(level1_number):
        graph.add_edge(0, i + 1, weight=0)


def add_level1_duplicate_edges(graph):
    for i in range(level1_number):
        graph.add_edge(i + 1, i + 1 + level1_number, weight=0)


def add_level1_to_level2_edges(graph):
    for i, preference in enumerate(level1_preferences):
        for j, choice in enumerate(chosen(preference, 1)):
            weight = min(WEIGHTED_HIERARCHIES, 1) * (
                level1_number ** (j + (WEIGHTED_HIERARCHIES - 1) * (max2 - 1)))
            graph.add_edge(i + 1 + level1_number,
                           int(choice) + level1_number * 2,
                           weight=weight)


# H = nx.DiGraph()
# G = nx.DiGraph()
#
# add_nodes1(H)
# add_nodes2(H)
# add_nodes3(H)
# add_edges_from_source(H)
# add_level1_duplicate_edges(H)
# add_level1_to_level2_edges(H)
#
# print H.edges()

# add_nodes1(G)
# add_nodes2(G)
# add_nodes3(G)
# add_edges_from_source(G)
# add_level1_duplicate_edges(G)
# add_level1_to_level2_edges(G)


G.add_edge(232, 367, capacity=3, weight=0)
G.add_edge(190, 325, capacity=1, weight=0)
G.add_edge(189, 324, capacity=1, weight=0)
G.add_edge(243, 378, capacity=3, weight=0)
G.add_edge(193, 328, capacity=1, weight=0)
G.add_edge(252, 387, capacity=1, weight=0)
G.add_edge(191, 326, capacity=1, weight=0)
G.add_edge(167, 302, capacity=2, weight=0)
G.add_edge(176, 311, capacity=1, weight=0)
G.add_edge(231, 366, capacity=3, weight=0)
G.add_edge(184, 319, capacity=0, weight=0)
G.add_edge(197, 332, capacity=1, weight=0)
G.add_edge(261, 396, capacity=1, weight=0)
G.add_edge(235, 370, capacity=1, weight=0)
G.add_edge(222, 357, capacity=1, weight=0)
G.add_edge(218, 353, capacity=1, weight=0)
G.add_edge(155, 290, capacity=1, weight=0)
G.add_edge(174, 309, capacity=1, weight=0)
G.add_edge(172, 307, capacity=1, weight=0)
G.add_edge(207, 342, capacity=3, weight=0)
G.add_edge(240, 375, capacity=1, weight=0)
G.add_edge(150, 285, capacity=3, weight=0)
G.add_edge(265, 400, capacity=1, weight=0)
G.add_edge(175, 310, capacity=1, weight=0)
G.add_edge(137, 272, capacity=1, weight=0)
G.add_edge(251, 386, capacity=1, weight=0)
G.add_edge(153, 288, capacity=2, weight=0)
G.add_edge(154, 289, capacity=1, weight=0)
G.add_edge(194, 329, capacity=1, weight=0)
G.add_edge(241, 376, capacity=1, weight=0)
G.add_edge(253, 388, capacity=1, weight=0)
G.add_edge(156, 291, capacity=1, weight=0)
G.add_edge(210, 345, capacity=1, weight=0)
G.add_edge(199, 334, capacity=1, weight=0)
G.add_edge(263, 398, capacity=1, weight=0)
G.add_edge(204, 339, capacity=1, weight=0)
G.add_edge(206, 341, capacity=3, weight=0)
G.add_edge(225, 360, capacity=1, weight=0)
G.add_edge(185, 320, capacity=1, weight=0)
G.add_edge(227, 362, capacity=1, weight=0)
G.add_edge(214, 349, capacity=1, weight=0)
G.add_edge(192, 327, capacity=1, weight=0)
G.add_edge(229, 364, capacity=1, weight=0)
G.add_edge(230, 365, capacity=1, weight=0)
G.add_edge(209, 344, capacity=1, weight=0)
G.add_edge(208, 343, capacity=1, weight=0)
G.add_edge(165, 300, capacity=1, weight=0)
G.add_edge(140, 275, capacity=1, weight=0)
G.add_edge(257, 392, capacity=1, weight=0)
G.add_edge(139, 274, capacity=3, weight=0)
G.add_edge(205, 340, capacity=3, weight=0)
G.add_edge(254, 389, capacity=1, weight=0)
G.add_edge(152, 287, capacity=1, weight=0)
G.add_edge(239, 374, capacity=1, weight=0)
G.add_edge(133, 268, capacity=1, weight=0)
G.add_edge(223, 358, capacity=1, weight=0)
G.add_edge(196, 331, capacity=1, weight=0)
G.add_edge(248, 383, capacity=1, weight=0)
G.add_edge(233, 368, capacity=3, weight=0)
G.add_edge(166, 301, capacity=1, weight=0)
G.add_edge(159, 294, capacity=1, weight=0)
G.add_edge(201, 336, capacity=1, weight=0)
G.add_edge(238, 373, capacity=1, weight=0)
G.add_edge(151, 286, capacity=1, weight=0)
G.add_edge(145, 280, capacity=3, weight=0)
G.add_edge(143, 278, capacity=1, weight=0)
G.add_edge(138, 273, capacity=1, weight=0)
G.add_edge(256, 391, capacity=1, weight=0)
G.add_edge(171, 306, capacity=1, weight=0)
G.add_edge(212, 347, capacity=1, weight=0)
G.add_edge(135, 270, capacity=1, weight=0)
G.add_edge(203, 338, capacity=1, weight=0)
G.add_edge(250, 385, capacity=1, weight=0)
G.add_edge(228, 363, capacity=1, weight=0)
G.add_edge(198, 333, capacity=1, weight=0)
G.add_edge(202, 337, capacity=1, weight=0)
G.add_edge(213, 348, capacity=3, weight=0)
G.add_edge(141, 276, capacity=1, weight=0)
G.add_edge(136, 271, capacity=1, weight=0)
G.add_edge(147, 282, capacity=1, weight=0)
G.add_edge(211, 346, capacity=1, weight=0)
G.add_edge(234, 369, capacity=1, weight=0)
G.add_edge(182, 317, capacity=3, weight=0)
G.add_edge(224, 359, capacity=3, weight=0)
G.add_edge(195, 330, capacity=1, weight=0)
G.add_edge(183, 318, capacity=3, weight=0)
G.add_edge(226, 361, capacity=1, weight=0)
G.add_edge(215, 350, capacity=1, weight=0)
G.add_edge(173, 308, capacity=1, weight=0)
G.add_edge(247, 382, capacity=1, weight=0)
G.add_edge(134, 269, capacity=3, weight=0)
G.add_edge(177, 312, capacity=3, weight=0)
G.add_edge(260, 395, capacity=1, weight=0)
G.add_edge(219, 354, capacity=1, weight=0)
G.add_edge(169, 304, capacity=1, weight=0)
G.add_edge(178, 313, capacity=1, weight=0)
G.add_edge(161, 296, capacity=1, weight=0)
G.add_edge(262, 397, capacity=1, weight=0)
G.add_edge(180, 315, capacity=3, weight=0)
G.add_edge(179, 314, capacity=1, weight=0)
G.add_edge(220, 355, capacity=1, weight=0)
G.add_edge(216, 351, capacity=1, weight=0)
G.add_edge(160, 295, capacity=2, weight=0)
G.add_edge(162, 297, capacity=1, weight=0)
G.add_edge(146, 281, capacity=1, weight=0)
G.add_edge(242, 377, capacity=1, weight=0)
G.add_edge(259, 394, capacity=1, weight=0)
G.add_edge(249, 384, capacity=1, weight=0)
G.add_edge(148, 283, capacity=1, weight=0)
G.add_edge(149, 284, capacity=1, weight=0)
G.add_edge(217, 352, capacity=1, weight=0)
G.add_edge(367, 428, weight=1)
G.add_edge(325, 419, weight=1)
G.add_edge(324, 419, weight=1)
G.add_edge(378, 432, weight=1)
G.add_edge(328, 419, weight=1)
G.add_edge(387, 429, weight=1)
G.add_edge(326, 419, weight=1)
G.add_edge(302, 413, weight=1)
G.add_edge(311, 414, weight=1)
G.add_edge(366, 428, weight=1)
G.add_edge(319, 417, weight=1)
G.add_edge(332, 421, weight=1)
G.add_edge(396, 435, weight=1)
G.add_edge(396, 420, weight=66)
G.add_edge(370, 431, weight=1)
G.add_edge(357, 426, weight=1)
G.add_edge(353, 425, weight=1)
G.add_edge(290, 409, weight=1)
G.add_edge(309, 414, weight=1)
G.add_edge(307, 414, weight=1)
G.add_edge(342, 403, weight=1)
G.add_edge(342, 416, weight=66)
G.add_edge(342, 423, weight=4356)
G.add_edge(375, 432, weight=1)
G.add_edge(285, 407, weight=1)
G.add_edge(400, 434, weight=1)
G.add_edge(310, 414, weight=1)
G.add_edge(272, 404, weight=1)
G.add_edge(386, 418, weight=1)
G.add_edge(386, 403, weight=66)
G.add_edge(288, 409, weight=1)
G.add_edge(289, 409, weight=1)
G.add_edge(329, 421, weight=1)
G.add_edge(376, 432, weight=1)
G.add_edge(388, 430, weight=1)
G.add_edge(291, 410, weight=1)
G.add_edge(345, 424, weight=1)
G.add_edge(334, 422, weight=1)
G.add_edge(398, 423, weight=1)
G.add_edge(339, 422, weight=1)
G.add_edge(341, 423, weight=1)
G.add_edge(360, 427, weight=1)
G.add_edge(360, 414, weight=66)
G.add_edge(320, 417, weight=1)
G.add_edge(320, 427, weight=66)
G.add_edge(362, 427, weight=1)
G.add_edge(349, 425, weight=1)
G.add_edge(327, 419, weight=1)
G.add_edge(364, 427, weight=1)
G.add_edge(365, 427, weight=1)
G.add_edge(344, 424, weight=1)
G.add_edge(343, 424, weight=1)
G.add_edge(300, 412, weight=1)
G.add_edge(275, 416, weight=1)
G.add_edge(392, 430, weight=1)
G.add_edge(274, 405, weight=1)
G.add_edge(274, 416, weight=66)
G.add_edge(340, 423, weight=1)
G.add_edge(389, 430, weight=1)
G.add_edge(287, 408, weight=1)
G.add_edge(374, 432, weight=1)
G.add_edge(268, 404, weight=1)
G.add_edge(268, 430, weight=66)
G.add_edge(358, 426, weight=1)
G.add_edge(331, 421, weight=1)
G.add_edge(383, 418, weight=1)
G.add_edge(368, 428, weight=1)
G.add_edge(301, 413, weight=1)
G.add_edge(294, 410, weight=1)
G.add_edge(336, 422, weight=1)
G.add_edge(373, 432, weight=1)
G.add_edge(286, 408, weight=1)
G.add_edge(280, 405, weight=1)
G.add_edge(278, 405, weight=1)
G.add_edge(273, 405, weight=1)
G.add_edge(391, 430, weight=1)
G.add_edge(306, 414, weight=1)
G.add_edge(347, 424, weight=1)
G.add_edge(270, 404, weight=1)
G.add_edge(338, 422, weight=1)
G.add_edge(385, 418, weight=1)
G.add_edge(385, 416, weight=66)
G.add_edge(363, 427, weight=1)
G.add_edge(333, 421, weight=1)
G.add_edge(337, 422, weight=1)
G.add_edge(348, 424, weight=1)
G.add_edge(348, 427, weight=66)
G.add_edge(348, 429, weight=4356)
G.add_edge(276, 405, weight=1)
G.add_edge(276, 406, weight=66)
G.add_edge(276, 416, weight=4356)
G.add_edge(271, 404, weight=1)
G.add_edge(282, 406, weight=1)
G.add_edge(346, 424, weight=1)
G.add_edge(369, 431, weight=1)
G.add_edge(317, 416, weight=1)
G.add_edge(359, 416, weight=1)
G.add_edge(359, 403, weight=66)
G.add_edge(330, 421, weight=1)
G.add_edge(318, 408, weight=1)
G.add_edge(361, 427, weight=1)
G.add_edge(350, 425, weight=1)
G.add_edge(308, 414, weight=1)
G.add_edge(382, 418, weight=1)
G.add_edge(269, 404, weight=1)
G.add_edge(269, 406, weight=66)
G.add_edge(269, 411, weight=4356)
G.add_edge(312, 415, weight=1)
G.add_edge(395, 435, weight=1)
G.add_edge(354, 426, weight=1)
G.add_edge(304, 413, weight=1)
G.add_edge(313, 415, weight=1)
G.add_edge(296, 411, weight=1)
G.add_edge(397, 435, weight=1)
G.add_edge(397, 420, weight=66)
G.add_edge(315, 415, weight=1)
G.add_edge(314, 415, weight=1)
G.add_edge(355, 426, weight=1)
G.add_edge(351, 425, weight=1)
G.add_edge(295, 411, weight=1)
G.add_edge(297, 412, weight=1)
G.add_edge(281, 405, weight=1)
G.add_edge(377, 432, weight=1)
G.add_edge(394, 435, weight=1)
G.add_edge(394, 405, weight=66)
G.add_edge(384, 418, weight=1)
G.add_edge(283, 406, weight=1)
G.add_edge(284, 406, weight=1)
G.add_edge(284, 408, weight=66)
G.add_edge(352, 425, weight=1)
G.add_edge(428, 461, capacity=1, weight=0)
G.add_edge(419, 452, capacity=3, weight=0)
G.add_edge(432, 465, capacity=3, weight=0)
G.add_edge(429, 462, capacity=3, weight=0)
G.add_edge(413, 446, capacity=3, weight=0)
G.add_edge(414, 447, capacity=3, weight=0)
G.add_edge(417, 450, capacity=0, weight=0)
G.add_edge(421, 454, capacity=3, weight=0)
G.add_edge(435, 468, capacity=3, weight=0)
G.add_edge(420, 453, capacity=3, weight=0)
G.add_edge(431, 464, capacity=3, weight=0)
G.add_edge(426, 459, capacity=3, weight=0)
G.add_edge(425, 458, capacity=3, weight=0)
G.add_edge(409, 442, capacity=1, weight=0)
G.add_edge(403, 436, capacity=3, weight=0)
G.add_edge(416, 449, capacity=3, weight=0)
G.add_edge(423, 456, capacity=1, weight=0)
G.add_edge(407, 440, capacity=1, weight=0)
G.add_edge(434, 467, capacity=2, weight=0)
G.add_edge(404, 437, capacity=3, weight=0)
G.add_edge(418, 451, capacity=1, weight=0)
G.add_edge(430, 463, capacity=3, weight=0)
G.add_edge(410, 443, capacity=3, weight=0)
G.add_edge(424, 457, capacity=3, weight=0)
G.add_edge(422, 455, capacity=3, weight=0)
G.add_edge(427, 460, capacity=3, weight=0)
G.add_edge(412, 445, capacity=3, weight=0)
G.add_edge(405, 438, capacity=3, weight=0)
G.add_edge(408, 441, capacity=3, weight=0)
G.add_edge(406, 439, capacity=3, weight=0)
G.add_edge(411, 444, capacity=3, weight=0)
G.add_edge(415, 448, capacity=1, weight=0)
G.add_edge(438, 469, weight=0)
G.add_edge(461, 469, weight=0)
G.add_edge(436, 469, weight=0)
G.add_edge(452, 469, weight=0)
G.add_edge(465, 469, weight=0)
G.add_edge(462, 469, weight=0)
G.add_edge(437, 469, weight=0)
G.add_edge(446, 469, weight=0)
G.add_edge(447, 469, weight=0)
G.add_edge(435, 469, weight=0)
G.add_edge(450, 469, weight=0)
G.add_edge(454, 469, weight=0)
G.add_edge(468, 469, weight=0)
G.add_edge(453, 469, weight=0)
G.add_edge(464, 469, weight=0)
G.add_edge(459, 469, weight=0)
G.add_edge(458, 469, weight=0)
G.add_edge(442, 469, weight=0)
G.add_edge(449, 469, weight=0)
G.add_edge(456, 469, weight=0)
G.add_edge(440, 469, weight=0)
G.add_edge(467, 469, weight=0)
G.add_edge(451, 469, weight=0)
G.add_edge(463, 469, weight=0)
G.add_edge(443, 469, weight=0)
G.add_edge(457, 469, weight=0)
G.add_edge(455, 469, weight=0)
G.add_edge(460, 469, weight=0)
G.add_edge(445, 469, weight=0)
G.add_edge(441, 469, weight=0)
G.add_edge(439, 469, weight=0)
G.add_edge(444, 469, weight=0)
G.add_edge(448, 469, weight=0)
import sys

try:
    J = nx.max_flow_min_cost(G, 0, 469)
except nx.NetworkXUnfeasible:
    print(
        'Allocation satisfying the lower bounds is not possible. Try reducing lower bounds.')
    sys.exit(1)
except nx.NetworkXError:
    print(
        'The input graph is not directed or not connected. Please check the data if all the choices on the level 1 list are included in the level 2 list and the choices on the level 2 list are included in the level 3 list.')
    sys.exit(1)
except nx.NetworkXUnbounded:
    print(
        'Allocation is not possible because some upper capacity bounds at level 1 have not been set up. Please check the data.')
    sys.exit(1)
